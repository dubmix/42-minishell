
// // void	triage_cmd_redir(t_shell *cmd)
// // {
// // 	t_token	*temp;
// // 	int		redir_in;
// // 	int		redir_out;
// // 	int		heredoc;
// // 	int		append;

// // 	temp = cmd->tok_lst;
// // 	redir_in = 0;
// // 	redir_out = 0;
// // 	heredoc = 0;
// // 	append = 0;
// // 	// should I malloc only in the number are different from 0 ? then different function for it,could put the end with 0 also in it with a different status kinda
// // 	cmd->redir_in_arr = (char **)malloc(sizeof(char *) * cmd->redir_in + 1);
// // 	cmd->redir_out_arr = (char **)malloc(sizeof(char *) * cmd->redir_out + 1);
// // 	cmd->heredoc_arr = (char **)malloc(sizeof(char *) * cmd->heredoc + 1);
// // 	cmd->append_arr = (char **)malloc(sizeof(char *) * cmd->append + 1);
// // 	if (!cmd->redir_in_arr || !cmd->redir_out_arr || !cmd->heredoc_arr || !cmd->append_arr)
// // 		return ;
// // 	while (temp != NULL)
// // 	{
// // 		if (temp->type == REDIRECT_IN)
// // 		{
// // 			cmd->redir_in_arr[redir_in] = ft_strdup(copy_redir(cmd,
// // 					temp->index));
// // 			redir_in++;
// // 		}
// // 		else if (temp->type == REDIRECT_OUT)
// // 		{
// // 			cmd->redir_out_arr[redir_out] = ft_strdup(copy_redir(cmd,
// // 					temp->index));
// // 			redir_out++;
// // 		}
// // 		else if (temp->type == REDIR_IN_DOUBLE)
// // 		{
// // 			cmd->heredoc_arr[heredoc] = ft_strdup(copy_redir(cmd, temp->index));
// // 			heredoc++;
// // 		}
// // 		else if (temp->type == REDIR_OUT_DOUBLE)
// // 		{
// // 			cmd->append_arr[append] = ft_strdup(copy_redir(cmd, temp->index));
// // 			append++;
// // 		}
// // 		temp = temp->next;
// // 	}
// // 	cmd->redir_in_arr[redir_in] = 0;
// // 	cmd->redir_out_arr[redir_out] = 0;
// // 	cmd->heredoc_arr[heredoc] = 0;
// // 	cmd->append_arr[append] = 0;
// // }


char	*copy_redir(t_shell *cmd, int nb_node)
{
	int		i;
	t_token	*temp;

	i = 0;
	temp = cmd->tok_lst;
	while (temp != NULL)
	{
		while (i < nb_node)
		{
			temp = temp->next;
			i++;
		}
		if (temp->type == 0)
			break ;
		temp = temp->next;
	}
	return (temp->command);
}

		while (temp != NULL && temp->type != PIPE)
		{
			if (temp->type == REDIR_IN_DOUBLE || temp->type == REDIR_OUT_DOUBLE || temp->type == REDIRECT_IN || temp->type == REDIRECT_OUT)
				temp = temp->next->next;
			else if (temp->type == WORD)
				j++;
			if (temp != NULL)
				temp = temp->next;
			else
				break;
		}
		cmd->words_per_pipe[i] = j;
		j = 0;
		i++;
		if (temp != NULL)
			temp = temp->next;
		else
			break;
	}
}